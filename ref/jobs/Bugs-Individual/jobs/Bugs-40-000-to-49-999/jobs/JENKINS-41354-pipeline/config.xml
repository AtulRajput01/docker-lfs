<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.12.2">
  <actions/>
  <description>&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-41354&quot;&gt;JENKINS-41354&lt;/a&gt; pipeline does not have git env variables</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.28.0">
      <projectUrl>https://github.com/MarkEWaite/jenkins-bugs</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@1.9.0">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <hudson.triggers.SCMTrigger>
          <spec></spec>
          <ignorePostCommitHooks>false</ignorePostCommitHooks>
        </hudson.triggers.SCMTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.40">
    <script>def gitVars = null

node {
   stage(&apos;Prep&apos;) {
       gitVars = checkout([$class: &apos;GitSCM&apos;,
              branches: [[name: &apos;master&apos;]],
              extensions:
                [[$class: &apos;AuthorInChangelog&apos;],
                 [$class: &apos;LocalBranch&apos;, localBranch: &apos;**&apos;],
                 [$class: &apos;CloneOption&apos;, honorRefspec: true, noTags: true, reference: &apos;/var/lib/git/mwaite/bugs/jenkins-bugs.git&apos;],
                 [$class: &apos;CleanBeforeCheckout&apos;]],
              userRemoteConfigs:
                [[refspec: &apos;+refs/heads/master:refs/remotes/origin/master&apos;,
                  url: &apos;https://github.com/MarkEWaite/jenkins-bugs&apos;]]])
   }
   stage(&apos;Build&apos;) {
      if (isUnix()) {
         sh &quot;env | sort&quot;
      } else {
         bat(&quot;set&quot;)
      }
      def output = &quot;*** Map returned from checkout ***:\n&quot;
      for (gitEnv in gitVars) {
          output = output + &quot;${gitEnv.key}=${gitEnv.value}\n&quot;
      }
      echo output
   }
   stage(&apos;Verify&apos;) {
      // Log should contain GIT_COMMIT=
      if (!manager.logContains(&quot;.*GIT_COMMIT=.*&quot;)) {
          manager.addWarningBadge(&quot;No GIT_COMMIT env variable&quot;)
          manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;&lt;h1&gt;No GIT_COMITT env variable!&lt;/h1&gt;&quot;, false, false, false, &quot;yellow&quot;)
          manager.buildUnstable()
      }
   }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
